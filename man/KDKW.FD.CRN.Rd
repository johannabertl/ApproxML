% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/KDKW.FD.CRN.R
\name{KDKW.FD.CRN}
\alias{KDKW.FD.CRN}
\alias{KDKW.FD.CRN.theta.0}
\alias{KDKW.FD.CRN.s.obs}
\title{Approximate maximum likelihood algorithm based on Kiefer-Wolfowitz stochastic approximation with common random numbers}
\usage{
KDKW.FD.CRN(s.obs, theta.0, simfun, rest = matrix(c(-Inf, Inf), ncol = 2, nrow
  = length(theta.0), byrow = T), ce, gamma = 1/6, C = 0, a, alpha = 1,
  A = 0, K, nk, Hfun = bw.nrd0.mult, Hnum, kernel, lg = T, ...)

KDKW.FD.CRN.theta.0(theta.0, s.obs, simfun, rest = matrix(c(-Inf, Inf), ncol =
  2, nrow = length(theta.0), byrow = T), ce, gamma = 1/6, C = 0, a,
  alpha = 1, A = 0, K, nk, Hfun = bw.nrd0.mult, Hnum, kernel, lg = T,
  ...)

KDKW.FD.CRN.s.obs(s.obs, theta.0, simfun, rest = matrix(c(-Inf, Inf), ncol =
  2, nrow = length(theta.0), byrow = T), ce, gamma = 1/6, C = 0, a,
  alpha = 1, A = 0, K, nk, Hfun = bw.nrd0.mult, Hnum, kernel, lg = T,
  ...)
}
\arguments{
\item{s.obs}{Vector of observed summary statistics}

\item{theta.0}{Vector of starting point}

\item{simfun}{name of the function which is used to simulate data (further arguments to simfun are given with ...). Note that simfun needs to have an argument "seed" for common random number generation.}

\item{rest}{Matrix with restrictions on the parameterspace (matrix with 2 columns that contain the lower and upper bounds for the elements of theta). Use -Inf and Inf for unrestricted parameters. The default value is an unrestricted parameter space.}

\item{ce}{numeric}

\item{gamma}{numeric}

\item{C}{integer}

\item{a}{numeric}

\item{alpha}{numeric}

\item{A}{integer}

\item{K}{number of steps}

\item{nk}{number of simulations per step}

\item{Hfun}{function which computes the bandwidth matrix. Can be one of the functions in bw.r}

\item{Hnum}{how often shall the bandwidth matrix be computed? Possible values: "once" or an integer indicating after how many iterations the bandwidth selection is to be renewed (e. g. 1 => bandwidth selection in each step)}

\item{kernel}{kernel function}

\item{lg}{logical. Use the log-likelihood instead of the likelihood?}

\item{...}{further arguments which are passed on to simulate the data with simfun}
}
\description{
This function approximates the maximum likelihood estimate of the multivariate parameter theta. It requires a function to simulate data given a random seed and compute summary statistics at each position of the parameter space. These simulations are used to obtain estimates the likelihood in a stochastic approximation algorithm based on finite differences approximation of the gradient (Kiefer-Wolfowitz algorithm). The random seed is used to generate common random numbers (CRNs) to reduce the variance of the gradient estimates and thereby the final parameter estimate.
}
\details{
Note that currently in each iteration, a single integer valued seed is passed on to the simulation function for simulation at theta+ and theta-. This might not be enough for complex simulations and should probably be replaced by an implementation e. g. using setRNG::setRNG that sets a vector of 264 integers as seed, and maybe a flexible number of seeds, if multiple random samples need to be generated.

The simulation function needs to have an argument "seed". At the moment, this is not implemented for most simulation functions.
}
\section{Functions}{
\itemize{
\item \code{KDKW.FD.CRN.theta.0}: The same function for a set of different starting values, use e. g. with apply or mclapply. It uses \code{try} catch errors.

\item \code{KDKW.FD.CRN.s.obs}: The same function for a set of different summary statistics, use e. g. with apply or mclapply. It uses \code{try} catch errors.
}}

\section{Gain sequences}{

The gain sequences are defined following Spall (2013):
\deqn{ a_k = \frac{a}{(k + A)^{\alpha}} \text{ and }
c_k = \frac{c}{(k + C)^{\gamma}}. }{ a_k = a/(k + A)^alpha and c_k = c/(k + C)^gamma. }
Usually, C>0 is only used if the algorithm is resumed. The default values alpha=1 and gamma=1/6 are given in Spall (2013).
}

\examples{

# Comparison between the algorithm with common random numbers and the standard version with independent random numbers on a simple Poisson GLMM with a single fixed mean and a random intercept.

test1 = KDKW.FD.CRN(s.obs=c(3.5, 10), theta.0=c(1,0.5), simfun=SIMCRNpoisson_glmm_simple, rest=matrix(c(-1, 5, 0.1, 3), ncol=2, nrow=2, byrow=T), ce=1, gamma = 1/6, C=0, a = 2, alpha = 1, A=0, K=200, nk=20, Hfun = bw.nrd0.flex, Hnum="once", kernel=robust.unscaled.diagonal, lg = T, n=100)

test_noCRN = KDKW.FD(s.obs=c(3.5, 10), theta.0=c(1,0.5), simfun=SIMpoisson_glmm_simple, rest=matrix(c(-1, 5, 0.1, 3), ncol=2, nrow=2, byrow=T), ce=1, gamma = 1/6, C=0, a = 2, alpha = 1, A=0, K=200, nk=20, Hfun = bw.nrd0.flex, Hnum="once", kernel=robust.unscaled.diagonal, lg = T, n=100)

par(mfrow=c(2,1))
matplot(test1$theta, t="l", ylim=c(0.5, 1.5))
matplot(test_noCRN$theta, t="l", ylim=c(0.5, 1.5))
par(mfrow=c(1,1))

}
\references{
\itemize{
\item Bertl, J.; Ewing, G.; Kosiol, C. & Futschik, A. Approximate Maximum Likelihood Estimation for Population Genetic Inference. Statistical Applications in Genetics and Molecular Biology, 2017, 16, p. 291-312
\item Kiefer, J. & Wolfowitz, J. Stochastic estimation of the maximum of a regression function. The Annals of Mathematical Statistics, 1952, 23, p. 462-466
\item Blum, J. R. Multidimensional stochastic approximation methods. The Annals of Mathematical Statistics, 1954, 25, 737-744
\item Spall, J. C. Introduction to Stochastic Search and Optimization: Estimation, Simulation and Control. Wiley, 2003
}
}
\author{
Johanna Bertl
}
